What is Pytest:
    Pytest is a testing framework based on python. It is mainly used to write API test cases
    Pytest is a python based testing framework, which is used to write and execute test codes.
    In the present days of REST services, pytest is mainly used for API testing even though we can use pytest to write simple to complex tests, 
    i.e., we can write codes to test API, database, UI, etc.

Advantages Of Pytest:
    1.Pytest can run multiple tests in parallel, which reduces the execution time of the test suite.
    2.Pytest has its own way to detect the test file and test functions automatically, if not mentioned explicitly.
    3.Pytest allows us to skip a subset of the tests during execution.
    4.Pytest allows us to run a subset of the entire test suite.
    5.Pytest is free and open source.
    6.Because of its simple syntax, pytest is very easy to start with.

What is Assert:
    # In Selenium, Asserts are validations or checkpoints for an application
    # Asserts in Selenium validate the automated test cases that help testers understand,
     if tests have passed or failed.
    
How to use print in Pytest:
    Use -s option while running the pytest command.
    If you have any print statements in your code, they will get printed on the console.
    pytest <testcase_to_execute> -s

What are the rules for writing test cases using pytest:
    Here are two basic rules you should remember while writing test cases.
    1. Testcase function should start with the keyword test_.
    2. Python file name should start with test_ or end with _test

How to execute and run unit test cases:
    There are different ways to execute the test cases.
    1. Execute all test cases from all the Python files in the given directory.
        command:  pytest
    2. Execute all the test cases from the given Python file name.
        command:  pytest <file_name>
    3. Execute specific test cases from the given Python file.
        command:  pytest <file_name>::<test_case>

How To Execute of Subset of test suite:
    #In a real scenario, we will have multiple test files and each file will have a number of tests. 
        Suppose, we want to run only a specific set of tests; how do we go about it?
    #Pytest provides two ways to run the subset of the test suite.
        1)Select tests to run based on substring matching of test names.
        2)Select tests groups to run based on the markers applied.


	1)Select tests to run based on substring matching of test names.
        commamd:
                pytest -k <substring> -v

        -k <substring> represents the substring to search for in the test names.



	2)Pytest - Grouping the Tests:
	    #Pytest allows us to use markers on test functions. Markers are used to set various features/attributes to test functions.
	    #Pytest provides many inbuilt markers such as xfail, skip and parametrize. 
	    #Apart from that, users can create their own marker names. Markers are applied on the tests using the syntax given below −

	    Syntax:
		   @pytest.mark.<markername>
	    ex:
		import pytest
		
	1.	@pytest.mark.great
		def test_greater():
		num = 100
		assert num > 100

	2.	@pytest.mark.great
		def test_greater_equal():
		num = 100
		assert num >= 100

	3.	@pytest.mark.others
		def test_less():
		num = 100
		assert num < 200

	    Command:
		pytest -m <markername> -v
		
		if You run this,only great marked function will run 
		     pytest -m great -v 
		  

Pytest Fixtures:
            # Fixtures are functions, which will run before each test function to which it is applied.
            # Fixtures are used to feed some data to the tests such as database connections, URLs to test and some sort of input data.
            # Therefore, instead of running the same code for every test, 
            # we can attach fixture function to the tests and it will run and return the data to the test before executing each test.
  
        Syntax:  
                @pytest.fixture

        Ex.
            this is Fixture function,this tets will run first and return input value to other test
                @pytest.fixture                                
                def input_value():
                input = 39
                return input

            1.   def test_divisible_by_3(input_value):
                    assert input_value % 3 == 0

            2.    def test_divisible_by_6(input_value):
                    assert input_value % 6 == 0


Parametrizing Of Test:
            Parameterizing of a test is done to run the test against multiple sets of inputs. 
            We can do this by using the following marker −

        Syntax:
            @pytest.mark.parametrize
        Ex.
            @pytest.mark.parametrize("num, output",[(1,11),(2,22),(3,35),(4,44)])
            def test_multiplication_11(num, output):
            assert 11*num == output


Pytest X-fail/Skip Tests:
        1) X-fail:
            # A test is not relevant for some time due to some reasons.
            # A new feature is being implemented and we already added a test for that feature.

            Pytest will execute the xfailed test, but it will not be considered as part failed or passed tests.
            Details of these tests will not be printed even if the test fails

            Syntax:
                    @pytest.mark.xfail

            Ex.     @pytest.mark.xfail
                    @pytest.mark.great
                    def test_greater_equal():
                    num = 100
                    assert num >= 100
        2) Skip-Tests:
            Skipping a test means that the test will not be executed. We can skip tests using the following marker 
           
            Syntax:
            @pytest.mark.skip

            Later, when the test becomes relevant we can remove the markers.


Pytest - Stop Test Suite after N Test Failures:
    if we want to stop the execution of test suite soon after n number of test fails. 
    This can be done in pytest using maxfail.

    syntax:
            pytest --maxfail = <num>

Pytest: Run Tests in Parallel:
    By default, pytest runs tests in sequential order. 
    In a real scenario,a test suite will have a number of test files and each file will have a bunch of tests. 
    This will lead to a large execution time. To overcome this, pytest provides us with an option to run tests in parallel.

    we need to install :"pytest-xdist"

    command: pip install pytest-xdist

    syntax : pytest -n <num>
    Example: pytest -n 3

            -n <num> runs the tests by using multiple workers, here it is 3

Pytest Test Execution Results in XML:
    We can generate the details of the test execution in an xml file.

    command: 
            pytest <filename> -v --junitxml="result.xml"
    Example:
            pytest test_multiplication.py -v --junitxml="result.xml"




SUMMARY:
        Installing pytest..
        Identifying test files and test functions.
        Executing all test files using pytest –v.
        Executing specific file usimng pytest <filename> -v.
        Execute tests by substring matching pytest -k <substring> -v.
        Execute tests based on markers pytest -m <marker_name> -v.
        Creating fixtures using @pytest.fixture.
        conftest.py allows accessing fixtures from multiple files.
        Parametrizing tests using @pytest.mark.parametrize.
        Xfailing tests using @pytest.mark.xfail.
        Skipping tests using @pytest.mark.skip.
        Stop test execution on n failures using pytest --maxfail = <num>.
        Running tests in parallel using pytest -n <num>.
        Generating results xml using pytest -v --junitxml = "result.xml".
